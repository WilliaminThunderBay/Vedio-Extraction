 Hi, and welcome back. This is section 3, and we're going to cover how to evaluate your data. In this section, we'll look at different data formats and types. We'll also look at how you can visualize and analyze the data before feature engineering. Before you can start running statistics on your data to better understand what you're working with, you need to ensure it's in the right format for analysis. For Amazon SageMaker, algorithms support training with data in CSV format. Many of the tools you'll use to explore, visualize, and analyze the data can also read it in CSV format. Generally speaking, you'll need to have at least some domain knowledge for the problem you're trying to solve with machine learning. For example, if you're developing a model to predict if a set of symptoms indicates a disease, you'd need to know the relationship between the symptoms and the disease. Data typically needs to be in numeric form, so machine learning algorithms can use the data to make predictions. We'll look at ways you can convert text data in the next section. For now, we'll just explore the data and try to gain some insights into the overall data set. One popular open source Python library is Pandas. It can take data in various formats, reformat it, and load it into a tabular representation of your data, presenting it in rows and columns. Some of the formats that Pandas can reformat and load include CSV, Excel, Pickle, and JavaScript object notation or JSON. Pandas also has data analysis and manipulation features, and we'll use them throughout this module. Loading data can be as simple as the example, which pulls in the CSV file from the specified URL. When you load data into Pandas, it's stored as a Pandas data frame. In the Pandas documentation, a data frame is described as a general 2D-labeled, size-mutable tabular structure with potentially heterogeneously typed column. A more helpful way to think of a data frame is to think of it as a spreadsheet or a SQL table. Like a table or spreadsheet, a data frame will have rows, which are also known as instances, and it will have columns, which are also known as attributes. The shape property of a data frame describes the number of rows and columns it has. Each column in a data frame is a series. A series is a one-dimensional labeled array. A series can store data of any type. To learn more about data structures in Pandas, see the Pandas documentation. Along with data, you can load a data frame with row labels and column labels. The row labels are known as an index, and the column labels are known as columns. If you loaded your data from a CSV file with a header row, the columns will be created from the first line of the file. You can change that behavior, however. If you don't have column names in the source file, you can pass them as a parameter. When performing data analysis, it's important to make sure you're using the correct data types. In many cases, Pandas will correctly infer the correct data types when it loads data, and you can move on. If you have domain knowledge or access to a domain expert, they can often identify data type issues. You can use either D-types or the Info function to obtain information on the column types, as shown in the example. If you don't have the correct data types, you need to figure out why this is the case. Often a numeric column could have been missing data, or it could be a single text value. For example, in the Car data set, the number of doors can be 2, 3, 4, or 5 more. After you've analyzed the data, you can convert a column to the correct data type using Pandas. That's it for Part 1 of this section. We'll see you again for Part 2, where we'll review how to describe your data.