 Welcome back. In this section, we'll look at some of the tools you'll be using throughout the rest of this course. Before we start, this list isn't an exhaustive list of all the tools available today. We're only going to cover them at a high level, but it's a good place to get started. First, there's the Jupyter Notebook. The Jupyter Notebook is an open source web application you can use to create and share documents that contain live code, equations, visualizations, and narrative text. Uses include data cleaning and transformation, numerical simulation, statistical modeling, data visualization, machine learning, and much more. Jupyter Lab is a web-based interactive development environment for Jupyter Notebooks, code, and data. Jupyter Lab is flexible. You can use it to configure and arrange the user interface to support a wide range of workflows in data science, scientific computing, and machine learning. Jupyter Lab is extensible and modular. You can write plugins that add new components and integrate with existing ones. Later in this course, you'll use Amazon SageMaker, which hosts both Jupyter Notebooks and Jupyter Lab. Pandas is an open source Python library. It's used for data handling and analysis. Pandas represents data in a table similar to a spreadsheet. This table is known as a Pandas data frame. Matplotlib is a Python library for creating scientific, static, animated, and interactive visualizations in Python. You'll use it to generate plots of your data later in this course. Seaborn is another data visualization library for Python that's built on Matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphs. NumPy is one of the fundamental scientific computing packages in Python. It contains functions for n-dimensional array objects. It also has useful math functions, such as linear algebra, Fourier transform, and random number capabilities. SciPitLearn is an open source machine learning library that supports supervised and unsupervised learning. It also provides various tools for model fitting, data pre-processing, model selection and evaluation, and many other utilities. SciPitLearn is built on NumPy, SciPy, and Matplotlib. It's a good tool for exploring machine learning. Although you'll only use it to borrow a few functions in this course, you might want to consider exploring it after you complete this course. Moving up from individual libraries and packages, there are also tools that contain production-ready frameworks. We already mentioned SciPitLearn, which is a good library for machine learning. The frameworks supported on AWS, such as TensorFlow and Keras, also include libraries you can use for machine learning. All the frameworks listed here are supported on AWS and can be used from Amazon SageMaker. AWS also provides compute instances that are tuned for machine learning in both the cloud and at the edge. Compute instances can be optimized for learning and inference. Another AWS resource you can use are certain Amazon Machine Images, or AMIs. We offer pre-packaged AMIs that contain many of the popular frameworks. Finally, there's Amazon SageMaker, which is an AWS service with many capabilities. First, SageMaker can deploy machine learning instances running Jupyter Notebooks and Jupyter Lab. It manages the deployment of these compute resources, so you only need to connect to the Jupyter environment. SageMaker also provides tools for labeling data, training models, and hosting trained models. AWS Marketplace also provides a selection of ready-to-use model packages and algorithms from third-party machine learning developers. AWS also provides a set of managed machine learning services, and you can integrate them into your applications even if you don't have substantial machine learning experience. For computer vision, Amazon Recognition provides object and facial recognition for both image and video. Also, Amazon Textract can extract text from images. Speech services include Amazon Poly, which can speak text. Another speech service is Amazon Transcribe, which converts spoken audio to text. For language, Amazon Comprehend uses NLP to find insights and relationships in text. Also, Amazon Translate can translate text in to different languages. If you want to work with chatpots, Amazon Lex helps you build interactive conversational applications that use voice or text. For forecasting, Amazon Forecast uses machine learning to combine time series data with additional variables so you can build forecasts. And finally, if you'd like to work with recommendations, Amazon Personalize can help you create individual, personalized recommendations for customers. These managed services have already been trained in many aspects of the problem domain. You only need to provide your specific data to get started. We're going to look at many of these managed services in the second half of this course after you learn how to do things on your own. The key takeaways for this section include these points. First, Python is the most popular language for performing machine learning tasks. Jupyter Notebooks provide you with a web-based, hosted development environment for machine learning. You'll use Jupyter Notebooks frequently in machine learning. There are a large number of open source tools such as PENDIS that you'll use often as a machine learning practitioner. Finally, depending upon your requirements, you might start with low-level frameworks to create your own solution. You might also use tools such as Amazon SageMaker to help with some of the heavy lifting. Or you could simply use and adapt one of the managed Amazon ML services for your specific problem domain. That's it for this video. We'll see you in the next one.